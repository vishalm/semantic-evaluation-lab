name: CI/CD Pipeline with Docker

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # Docker environment validation
  docker-validation:
    name: Docker Environment Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Validate Docker Compose files
      run: |
        echo "üîç Validating Docker Compose configurations..."
        docker-compose config --quiet
        docker-compose -f docker-compose.prod.yml config --quiet
        docker-compose -f docker-compose.ci.yml config --quiet
        echo "‚úÖ All Docker Compose files are valid"
        
    - name: Test Docker environment
      run: |
        echo "üê≥ Testing Docker environment..."
        docker --version
        docker-compose --version
        echo "‚úÖ Docker environment ready"

  # Build all Docker images
  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: docker-validation
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build development image
      run: |
        echo "üê≥ Building development Docker image..."
        docker build --target development -t semantic-kernel:dev .
        
    - name: Build test image
      run: |
        echo "üê≥ Building test Docker image..."
        docker build --target test -t semantic-kernel:test .
        
    - name: Build production image
      run: |
        echo "üê≥ Building production Docker image..."
        docker build --target production -t semantic-kernel:prod .
        
    - name: Build CI image
      run: |
        echo "üê≥ Building CI Docker image..."
        docker build --target ci -t semantic-kernel:ci .
        
    - name: Test image sizes
      run: |
        echo "üìä Docker image sizes:"
        docker images semantic-kernel --format "table {{.Repository}}:{{.Tag}}\t{{.Size}}"

  # Code quality checks using Docker
  code-quality-docker:
    name: Code Quality Checks (Docker)
    runs-on: ubuntu-latest
    needs: docker-build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Run code quality checks in Docker
      run: |
        echo "üß™ Running code quality checks in Docker..."
        docker-compose --profile quality up --abort-on-container-exit quality-checks
        
    - name: Archive quality reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: quality-reports
        path: test-reports/bandit-report.json

  # Unit tests using Docker
  unit-tests-docker:
    name: Unit Tests (Docker)
    runs-on: ubuntu-latest
    needs: docker-build
    strategy:
      matrix:
        test-type: [unit, parallel]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Create test directories
      run: |
        mkdir -p test-reports logs htmlcov
        
    - name: Run unit tests (sequential)
      if: matrix.test-type == 'unit'
      run: |
        echo "üß™ Running unit tests in Docker..."
        docker-compose --profile unit up --abort-on-container-exit unit-tests
        
    - name: Run unit tests (parallel)
      if: matrix.test-type == 'parallel'
      run: |
        echo "üß™ Running parallel unit tests in Docker..."
        docker-compose -f docker-compose.ci.yml up --abort-on-container-exit unit-tests-parallel
        
    - name: Archive unit test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: unit-test-results-${{ matrix.test-type }}
        path: |
          test-reports/unit-test-results*.xml
          test-reports/coverage-unit*.xml
          htmlcov/unit/

  # Functional tests using Docker with Ollama
  functional-tests-docker:
    name: Functional Tests (Docker + Ollama)
    runs-on: ubuntu-latest
    needs: docker-build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Create test directories
      run: |
        mkdir -p test-reports logs htmlcov
        
    - name: Start Ollama service
      run: |
        echo "ü¶ô Starting Ollama service..."
        docker-compose --profile functional up -d ollama
        
    - name: Setup Ollama models
      run: |
        echo "‚öôÔ∏è Setting up Ollama models..."
        docker-compose --profile setup up --abort-on-container-exit ollama-setup
        
    - name: Wait for Ollama to be ready
      run: |
        echo "‚è≥ Waiting for Ollama to be ready..."
        timeout 120 bash -c 'until curl -f http://localhost:11434/api/tags; do sleep 5; done'
        
    - name: Run functional tests
      run: |
        echo "üß™ Running functional tests with Ollama..."
        docker-compose --profile functional up --abort-on-container-exit functional-tests
        
    - name: Archive functional test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: functional-test-results
        path: |
          test-reports/functional-test-results.xml
          test-reports/functional-test-report.html
          test-reports/coverage-functional.xml
          htmlcov/functional/

  # LLM Evaluation tests using Docker
  llm-evaluation-docker:
    name: LLM Evaluation Tests (Docker)
    runs-on: ubuntu-latest
    needs: docker-build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Create test directories
      run: |
        mkdir -p test-reports logs htmlcov
        
    - name: Start Ollama service
      run: |
        echo "ü¶ô Starting Ollama service for LLM evaluation..."
        docker-compose --profile llm-eval up -d ollama
        
    - name: Setup Ollama models
      run: |
        echo "‚öôÔ∏è Setting up models for LLM evaluation..."
        docker-compose --profile setup up --abort-on-container-exit ollama-setup
        
    - name: Wait for Ollama to be ready
      run: |
        echo "‚è≥ Waiting for Ollama to be ready..."
        timeout 120 bash -c 'until curl -f http://localhost:11434/api/tags; do sleep 5; done'
        
    - name: Run LLM evaluation tests
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        echo "üß™ Running LLM evaluation tests..."
        if [ -n "$OPENAI_API_KEY" ]; then
          echo "Using OpenAI API for DeepEval metrics"
          docker-compose --profile llm-eval up --abort-on-container-exit llm-eval-tests
        else
          echo "‚ö†Ô∏è No OpenAI API key - LLM evaluation tests will be skipped"
          echo "This is expected behavior in CI without secrets"
        fi
        
    - name: Archive LLM evaluation results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: llm-evaluation-results
        path: |
          test-reports/llm-eval-results.xml
          test-reports/llm-eval-report.html

  # Conversation chain tests using Docker
  conversation-chain-docker:
    name: Conversation Chain Tests (Docker)
    runs-on: ubuntu-latest
    needs: docker-build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Create test directories
      run: |
        mkdir -p test-reports logs htmlcov
        
    - name: Start Ollama service
      run: |
        echo "ü¶ô Starting Ollama for conversation chain tests..."
        docker-compose --profile conversation up -d ollama
        
    - name: Setup Ollama models
      run: |
        echo "‚öôÔ∏è Setting up models for conversation chains..."
        docker-compose --profile setup up --abort-on-container-exit ollama-setup
        
    - name: Wait for Ollama to be ready
      run: |
        echo "‚è≥ Waiting for Ollama to be ready..."
        timeout 120 bash -c 'until curl -f http://localhost:11434/api/tags; do sleep 5; done'
        
    - name: Run conversation chain tests
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        echo "üß™ Running conversation chain stability tests..."
        if [ -n "$OPENAI_API_KEY" ]; then
          echo "Using OpenAI API for conversation chain evaluation"
          docker-compose --profile conversation up --abort-on-container-exit conversation-chain-tests
        else
          echo "‚ö†Ô∏è No OpenAI API key - conversation chain tests will be skipped"
        fi
        
    - name: Archive conversation chain results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: conversation-chain-results
        path: |
          test-reports/conversation-chain-results.xml
          test-reports/conversation-chain-report.html

  # Dynamic conversation tests using Docker
  dynamic-conversation-docker:
    name: Dynamic Conversation Tests (Docker)
    runs-on: ubuntu-latest
    needs: docker-build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Create test directories
      run: |
        mkdir -p test-reports logs htmlcov
        
    - name: Start Ollama service
      run: |
        echo "ü¶ô Starting Ollama for dynamic conversation tests..."
        docker-compose --profile dynamic up -d ollama
        
    - name: Setup Ollama models
      run: |
        echo "‚öôÔ∏è Setting up models for dynamic conversations..."
        docker-compose --profile setup up --abort-on-container-exit ollama-setup
        
    - name: Wait for Ollama to be ready
      run: |
        echo "‚è≥ Waiting for Ollama to be ready..."
        timeout 120 bash -c 'until curl -f http://localhost:11434/api/tags; do sleep 5; done'
        
    - name: Run dynamic conversation tests
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        echo "üß™ Running dynamic conversation tests..."
        if [ -n "$OPENAI_API_KEY" ]; then
          echo "Using OpenAI API for dynamic conversation evaluation"
          docker-compose --profile dynamic up --abort-on-container-exit dynamic-conversation-tests
        else
          echo "‚ö†Ô∏è No OpenAI API key - dynamic conversation tests will be skipped"
        fi
        
    - name: Archive dynamic conversation results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: dynamic-conversation-results
        path: |
          test-reports/dynamic-conversation-results.xml
          test-reports/dynamic-conversation-report.html

  # Complete CI pipeline using Docker
  complete-ci-docker:
    name: Complete CI Pipeline (Docker)
    runs-on: ubuntu-latest
    needs: docker-build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Create test directories
      run: |
        mkdir -p test-reports logs htmlcov
        
    - name: Setup CI environment
      run: |
        echo "‚öôÔ∏è Setting up CI environment with Docker..."
        docker-compose -f docker-compose.ci.yml up -d ollama
        docker-compose -f docker-compose.ci.yml up --abort-on-container-exit ollama-ci-setup
        
    - name: Run complete CI pipeline
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        echo "üöÄ Running complete CI pipeline in Docker..."
        docker-compose -f docker-compose.ci.yml up --abort-on-container-exit ci-tests
        
    - name: Archive complete CI results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: complete-ci-results
        path: |
          test-reports/
          logs/
          htmlcov/

  # Docker production readiness test
  production-readiness-docker:
    name: Production Readiness Test (Docker)
    runs-on: ubuntu-latest
    needs: [docker-build, code-quality-docker, unit-tests-docker]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Test production image
      run: |
        echo "üè≠ Testing production Docker image..."
        docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d ollama
        docker-compose -f docker-compose.yml -f docker-compose.prod.yml up --abort-on-container-exit ollama-setup
        
    - name: Health check production services
      run: |
        echo "üè• Health checking production services..."
        timeout 60 bash -c 'until curl -f http://localhost:11434/api/tags; do sleep 5; done'
        echo "‚úÖ Production services are healthy"
        
    - name: Cleanup production test
      if: always()
      run: |
        docker-compose -f docker-compose.yml -f docker-compose.prod.yml down -v

  # Quality gate for Docker CI
  docker-quality-gate:
    name: Docker Quality Gate
    runs-on: ubuntu-latest
    needs: [
      docker-validation,
      docker-build,
      code-quality-docker,
      unit-tests-docker,
      functional-tests-docker,
      llm-evaluation-docker,
      conversation-chain-docker,
      dynamic-conversation-docker,
      production-readiness-docker
    ]
    if: always()
    
    steps:
    - name: Check critical job results
      run: |
        echo "=== DOCKER CI QUALITY GATE RESULTS ==="
        echo "Docker Validation: ${{ needs.docker-validation.result }}"
        echo "Docker Build: ${{ needs.docker-build.result }}"
        echo "Code Quality: ${{ needs.code-quality-docker.result }}"
        echo "Unit Tests: ${{ needs.unit-tests-docker.result }}"
        echo "Functional Tests: ${{ needs.functional-tests-docker.result }}"
        echo "LLM Evaluation: ${{ needs.llm-evaluation-docker.result }}"
        echo "Conversation Chains: ${{ needs.conversation-chain-docker.result }}"
        echo "Dynamic Conversations: ${{ needs.dynamic-conversation-docker.result }}"
        echo "Production Readiness: ${{ needs.production-readiness-docker.result }}"
        
    - name: Quality gate validation
      run: |
        # Critical components (must pass)
        if [[ "${{ needs.docker-validation.result }}" != "success" ]]; then
          echo "‚ùå Docker validation failed"
          exit 1
        fi
        if [[ "${{ needs.docker-build.result }}" != "success" ]]; then
          echo "‚ùå Docker build failed"
          exit 1
        fi
        if [[ "${{ needs.code-quality-docker.result }}" != "success" ]]; then
          echo "‚ùå Code quality checks failed"
          exit 1
        fi
        if [[ "${{ needs.unit-tests-docker.result }}" != "success" ]]; then
          echo "‚ùå Unit tests failed"
          exit 1
        fi
        if [[ "${{ needs.production-readiness-docker.result }}" != "success" ]]; then
          echo "‚ùå Production readiness test failed"
          exit 1
        fi
        
        # Flexible components (can skip gracefully)
        echo "=== FLEXIBLE TEST COMPONENTS ==="
        
        for component in "functional-tests-docker" "llm-evaluation-docker" "conversation-chain-docker" "dynamic-conversation-docker"; do
          result_var="needs.${component}.result"
          case "${!result_var}" in
            "success")
              echo "‚úÖ ${component} passed"
              ;;
            "skipped")
              echo "‚ö†Ô∏è ${component} skipped (expected when services unavailable)"
              ;;
            *)
              echo "‚ö†Ô∏è ${component} had issues but not blocking CI"
              ;;
          esac
        done
        
        echo "‚úÖ Docker CI Quality Gate PASSED"

  # Archive all Docker test reports
  docker-test-reports-archive:
    name: Archive Docker Test Reports
    runs-on: ubuntu-latest
    needs: [
      unit-tests-docker,
      functional-tests-docker,
      llm-evaluation-docker,
      conversation-chain-docker,
      dynamic-conversation-docker,
      complete-ci-docker
    ]
    if: always()
    
    steps:
    - name: Download all test artifacts
      uses: actions/download-artifact@v3
      with:
        path: docker-test-reports
        
    - name: Create Docker CI summary
      run: |
        cd docker-test-reports
        echo "# Docker CI Test Results Summary" > docker-ci-summary.md
        echo "Generated on: $(date)" >> docker-ci-summary.md
        echo "Commit: ${{ github.sha }}" >> docker-ci-summary.md
        echo "Docker CI Pipeline: ‚úÖ Complete" >> docker-ci-summary.md
        echo "" >> docker-ci-summary.md
        echo "## Docker Benefits:" >> docker-ci-summary.md
        echo "- ‚úÖ Consistent test environments" >> docker-ci-summary.md
        echo "- ‚úÖ Isolated service dependencies" >> docker-ci-summary.md
        echo "- ‚úÖ Parallel test execution" >> docker-ci-summary.md
        echo "- ‚úÖ Production-like testing" >> docker-ci-summary.md
        echo "- ‚úÖ Easier local reproduction" >> docker-ci-summary.md
        echo "" >> docker-ci-summary.md
        echo "## Available Test Reports:" >> docker-ci-summary.md
        find . -name "*.xml" -o -name "*.html" | sort >> docker-ci-summary.md
        
    - name: Archive Docker CI reports
      uses: actions/upload-artifact@v3
      with:
        name: docker-ci-comprehensive-reports
        path: docker-test-reports/
        retention-days: 30

  # Build and push Docker images (on main branch)
  docker-build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: docker-quality-gate
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub (optional)
      if: github.event_name == 'push'
      run: |
        echo "üê≥ Would log into Docker Hub here with credentials"
        echo "docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}"
        
    - name: Build and tag images for registry
      run: |
        echo "üèóÔ∏è Building and tagging images for registry..."
        docker build --target production -t semantic-kernel:latest .
        docker build --target production -t semantic-kernel:${{ github.sha }} .
        echo "‚úÖ Images built and tagged"
        
    - name: Push to registry (simulated)
      run: |
        echo "üì§ Would push images to registry:"
        echo "docker push semantic-kernel:latest"
        echo "docker push semantic-kernel:${{ github.sha }}"
        echo "‚úÖ Images would be pushed to registry" 